<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server-side programming on COMP312 notes</title>
    <link>https://philiplei.github.io/4server/</link>
    <description>Recent content in Server-side programming on COMP312 notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jun 2016 10:14:43 +0800</lastBuildDate><atom:link href="https://philiplei.github.io/4server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>4-1 Node.js primer</title>
      <link>https://philiplei.github.io/4server/4-1/</link>
      <pubDate>Fri, 17 Sep 2021 15:06:00 +0800</pubDate>
      
      <guid>https://philiplei.github.io/4server/4-1/</guid>
      <description>This lab goes through the basics of the Node.js platform.
Quick start Node.js (https://nodejs.org) is a platform built on Chrome&amp;rsquo;s JavaScript runtime V8 for easily building fast, scalable network applications. Node.js supports the same basic JavaScript programming language as web browsers. As the first example, let&amp;rsquo;s run the following program p101.mjs in both browser and Node. (Follow instruction to install Node.)
// p101.mjs // return the largest number in an array // assume at least 1 entry, and all entries are numbers function largest (A) { let big=A[0]; for (let i=1; i&amp;lt;A.</description>
    </item>
    
    <item>
      <title>4-2 Asynchronous callback</title>
      <link>https://philiplei.github.io/4server/4-2/</link>
      <pubDate>Fri, 17 Sep 2021 10:36:44 +0800</pubDate>
      
      <guid>https://philiplei.github.io/4server/4-2/</guid>
      <description>Asynchronous I/O handling Input / output operations, e.g. file reading/writing and network transactions, are much slower than CPU. Introductory programming examples (e.g. in Java and Python) typically use synchronous function call to perform I/O. Each file operation takes relatively long time to complete, and while the function call is waiting the I/O completion, the process / thread is blocked. When the I/O is completed, the program can continue to the next line in the program.</description>
    </item>
    
    <item>
      <title>4-3 Promise, await and async</title>
      <link>https://philiplei.github.io/4server/4-3/</link>
      <pubDate>Sat, 18 Sep 2021 16:05:00 +0800</pubDate>
      
      <guid>https://philiplei.github.io/4server/4-3/</guid>
      <description>Promise, basics In last section, we saw that many I/O operations take a callback function to report the result (if successful) or the error (if failing).
import dns from &amp;#39;dns&amp;#39;; const govHost = &amp;#34;www.gov.mo&amp;#34;; dns.resolve(govHost, (err, records) =&amp;gt; { if (err) throw err; console.log(`${govHost}resolves to ${records}`); }); These asynchronous callbacks are efficient and easy to understand. However, when we need to organize a sequence of asynchronous operations, excessive nesting of the callback functions will soon make the code overwhelming.</description>
    </item>
    
    <item>
      <title>4-4 Modules, import and export</title>
      <link>https://philiplei.github.io/4server/4-4/</link>
      <pubDate>Sun, 19 Sep 2021 10:57:00 +0800</pubDate>
      
      <guid>https://philiplei.github.io/4server/4-4/</guid>
      <description>When you build a complicated program, it becomes necessary to break your source code into multiple files called modules for better management and organization. In addition, you&amp;rsquo;ll often want to take advantage of other&amp;rsquo;s work and use third-party modules, e.g. install a package from https://npmjs.org. To support these, JavaScript allows programmers to export some functions / variables from a module, and import some functions / variable in another module.
In the JavaScript world (Browsers, Node.</description>
    </item>
    
    <item>
      <title>4-5 Database access</title>
      <link>https://philiplei.github.io/4server/4-5/</link>
      <pubDate>Wed, 22 Sep 2021 10:52:00 +0800</pubDate>
      
      <guid>https://philiplei.github.io/4server/4-5/</guid>
      <description>This lab demonstrates basic database programming in Node.js using a file-based database sqlite.
SQLite SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine (from https://www.sqlite.org/). The whole database is stored in a file, and an application can open this database directly without connecting to any server.
A popular module to access SQLite in Node is sqlite3. However, this module only provides a callback-based API. Therefore, we will also use the package sqlite which is a wrapper library on sqlite3 that provides a promise-based API.</description>
    </item>
    
  </channel>
</rss>
